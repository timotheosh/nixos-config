#+TITLE: Nixos Config
#+author: Tim Hawes
#+property: header-args :tangle yes :mkdirp yes

* configuration.nix
** Preamble and setting up mnamespace
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
#+END_SRC
** Imports
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];
#+END_SRC
** Boot UEFI
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
#+END_SRC
** Networking
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
  networking = {
      hostName = "atlantis"; # Define your hostname.
      networkmanager.enable = true;

      # The global useDHCP flag is deprecated, therefore explicitly set to false here.
      # Per-interface useDHCP will be mandatory in the future, so this generated config
      # replicates the default behaviour.
      useDHCP = false;
      interfaces.wlp2s0.useDHCP = true;

      # Configure network proxy if necessary
      # proxy.default = "http://user:password@proxy:port/";
      # proxy.noProxy = "127.0.0.1,localhost,internal.domain";
      firewall = {
          allowedTCPPorts = [ 17500 ];
          allowedUDPPorts = [ 17500 ];
      };
  };
#+END_SRC
** Locale and Timezone
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";
    console = {
    font = "firecode-14";
    keyMap = "us";
  };

  # Set your time zone.
  time.timeZone = "America/New_York";
#+END_SRC
** Overlay for Emacs
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
  nixpkgs = {
     config.allowUnfree = true;

     overlays = [
         (import (builtins.fetchTarball {
             url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
         }))
     ];
  };
#+END_SRC
** Packages
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    emacsUnstable # From overlay
    emacsPackagesNg.emacs-libvterm
    lsb-release
    wget
    vim
    firefox
    curl
    jq
    jdk11
    git
    fd
    ripgrep
    home-manager
    chromium
    plymouth
    sqlite
    python37Full
    cmake
    gnumake
    autoconf
    automake
    libtool
    gnum4
    gcc
    clang
    libvterm
    zlib
    python37Packages.editorconfig
    pandoc
    racket
    aspell
    aspellDicts.en
    aspellDicts.en-computers
    aspellDicts.en-science
    shellcheck
    graphviz
  ];
#+END_SRC
** Fonts
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
  fonts = {
    fonts = with pkgs; [
      dejavu_fonts
      source-code-pro
      source-sans-pro
      source-serif-pro
      roboto-mono
      iosevka
    ];
  };
#+END_SRC
** Services
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  #   pinentryFlavor = "gnome3";
  # };

  # List services that you want to enable:
  services = {
    flatpak.enable = true;
  };

  systemd.user.services.dropbox = {
    description = "Dropbox";
    wantedBy = [ "graphical-session.target" ];
    environment = {
      QT_PLUGIN_PATH = "/run/current-system/sw/" + pkgs.qt5.qtbase.qtPluginPrefix;
      QML2_IMPORT_PATH = "/run/current-system/sw/" + pkgs.qt5.qtbase.qtQmlPrefix;
    };
    serviceConfig = {
      ExecStart = "${pkgs.dropbox.out}/bin/dropbox";
      ExecReload = "${pkgs.coreutils.out}/bin/kill -HUP $MAINPID";
      KillMode = "control-group"; # upstream recommends process
      Restart = "on-failure";
      PrivateTmp = true;
      ProtectSystem = "full";
      Nice = 10;
    };
  };

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound.
  sound.enable = true;
  hardware.pulseaudio.enable = true;

  # Enable the X11 windowing system.
  services.xserver.enable = true;
  services.xserver.layout = "us";
  services.xserver.xkbOptions = "eurosign:e";

  # Enable touchpad support.
  # services.xserver.libinput.enable = true;

  # Enable the KDE Desktop Environment.
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;
#+END_SRC
** Users
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.thawes = {
    isNormalUser = true;
    extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
  };
#+END_SRC
** Postamble and closing
#+BEGIN_SRC nix :tangle /sudo::/etc/nixos/configuration.nix
  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "20.03"; # Did you read the comment?

}


#+END_SRC

