#+TITLE: Home Config
#+author: Tim Hawes
#+property: header-args :tangle yes :mkdirp yes

* Bash
** .profile
#+BEGIN_SRC shell :tangle ~/.profile
if [ -n ${XDG_SESSION_ID} ];then
    xdgpath=$(echo $XDG_DATA_DIRS|sed -e 's#/usr/local/share:##' -e 's#/usr/share:##')
    XDG_DATA_DIRS=/usr/local/share:/usr/share
    for x in $(find ~/.nix-profile/share/applications/*.desktop);do
        XDG_DATA_DIRS=$(dirname $(dirname $(readlink -f $x))):${XDG_DATA_DIRS}
    done
    XDG_DATA_DIRS=${HOME}/.local/share:${xdgpath}:${XDG_DATA_DIRS}
    export XDG_DATA_DIRS
fi

export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH

# home-manager should not manage shell rc files. We do much better on our own!
. "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"

PATH=${HOME}/perl5/bin:${PATH};export PATH
PERL5LIB=${HOME}/perl5/lib/perl5;export PERL5LIB

    PATH=$HOME/.roswell/bin:$HOME/.local/bin:$PATH;export PATH

# For virtualenvwrapper
PROJECT_HOME=${HOME}/.virtualenvs/;export PROJECT_HOME
VIRTUALENV_PYTHON=/usr/bin/python3;export VIRTUALENV_PYTHON

PROGRAMS=${HOME}/programs;export PROGRAMS
PATH=${PROGRAMS}/sbin:${PROGRAMS}/bin:${PATH};export PATH

GOPATH=${PROGRAMS}/share/golang;export GOPATH
PATH=${GOPATH}/bin:${PATH};export PATH

CHICKEN_REPOSITORY=${PROGRAMS}/lib/chicken/8;export CHICKEN_REPOSITORY
PATH=${PROGRAMS}/lib/chicken/bin:${PATH};export PATH

# For Node
PATH=${PROGRAMS}/share/node/bin:${PATH}; export PATH
NODE_PATH=${PROGRAMS}/share/node/lib/node_modules:${NODE_PATH}

# For awscli
if [ ! -e ~/bin/aws ] && [ -e ~/.virtualenvs/awscli/bin/aws ];then
    ln -s ~/.virtualenvs/awscli/bin/aws ~/bin/aws
fi

if [ -e ~/.virtualenvs/awscli/bin/aws_completer ];then
    complete -C ~/.virtualenvs/awscli/bin/aws_completer aws
fi

# For exercism.io
if [ -f ~/.config/exercism/exercism_completion.bash ]; then
    source ~/.config/exercism/exercism_completion.bash
fi

if [ -e $HOME/.cargo/bin ];then
    export PATH="$HOME/.cargo/bin:$PATH"
fi

PATH=${HOME}/.local/bin:${PATH};export PATH

PATH=${HOME}/bin:${PATH};export PATH

#+END_SRC
* Fontconfig
  #+BEGIN_SRC xml :tangle ~/.config/fontconfig/conf.d/10-nix-profile-fonts.conf
  <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
  <fontconfig>
    <dir>~/.nix-profile/lib/X11/fonts</dir>
    <dir>~/.nix-profile/share/fonts</dir>
  </fontconfig>
  #+END_SRC
* home
** config.nix
Allow unfree
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/config.nix
{
  allowUnfree = true;
  fonts.fontconfig.enable = true;
}
#+END_SRC
** home.nix
*** Preamble
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
{ pkgs, ... }:

{
  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  # Home Manager needs a bit of information about you and the
  # paths it should manage.
  home.username = "thawes";
  home.homeDirectory = "/home/thawes";
#+END_SRC
*** Overlay for Emacs
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
  nixpkgs = {
     config.allowUnfree = true;

     overlays = [
         (import (builtins.fetchTarball {
             url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
         }))
     ];
  };
#+END_SRC
*** Packages
**** Preamble
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
  home.packages = with pkgs; [
#+END_SRC
**** Packages to install
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
      emacsUnstable
      sqlite
      dropbox
      spideroak
      emacsPackagesNg.emacs-libvterm
      spotify
      discord
      racket
      nodejs-12_x
      enpass
      zoom-us
      yubikey-manager-qt
      yubioath-desktop
      yubikey-personalization-gui
      vscode-with-extensions
      (python36.withPackages (ps: with ps; [ setuptools pip virtualenv ]))
#+END_SRC
**** Fonts to install
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
      source-code-pro
      source-sans-pro
      source-serif-pro
      roboto-mono
      iosevka
#+END_SRC
**** Postamble
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
  ];
#+END_SRC
*** Programs
**** Preamble
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
  programs = {
#+END_SRC
**** direnv
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
      direnv = {
        enable = true;
        enableNixDirenvIntegration = true;
      };
#+END_SRC
**** Git
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
      git = {
          enable = true;
          userName = "Tim Hawes";
          userEmail = "trhawes@gmail.com";
      };
#+END_SRC
**** Postamble
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
  };
#+END_SRC
*** Services
**** Preamble
#+BEGIN_SRC  nix :tangle ~/.config/nixpkgs/home.nix
services = {
#+END_SRC
**** Postamble
#+BEGIN_SRC  nix :tangle ~/.config/nixpkgs/home.nix
};
#+END_SRC
*** Postamble
#+BEGIN_SRC nix :tangle ~/.config/nixpkgs/home.nix
  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "20.09";
}
#+END_SRC

*** Python
#+BEGIN_SRC  nix :tangle ~/.config/nixpkgs/home.nix
#+END_SRC
